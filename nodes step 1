将类的构造函数私有化，可以保证不让其他类创造该类对象

javadoc文档注释
  1. 类为public
  2. 只显示public方法
  
设计模式：对问题行之有效的解决方式，一种思想
单例模式（全静态化，生命周期较长）
  1. 构造函数私有化
  2. 创建一个私有对象
  3. 提供一个公共方法
//饿汉式
class Single//类一加载，对象就已经存在了
{
  private static Single s = new Single();
  
  private Single(){}
  
  public static Single getInstance()
  {
    return s;
  }
}
//懒汉式
class Single2//类加载进来，没有对象，延迟记载形式
{
  private static Single s = null;
  
  private Single(){}
  
  public static Single2 getInstance()
  {
    if(s == null)
      s = new Single2();
    return s;
  }
}

class SingleDemo
{
  public static void main(String[] args)
  {
    Single ss = Single.getInstance();
  }
}

继承的好处：
  1. 提高了代码的复用性
  2. 让类与类之间产生了关系，给多台提供了前提
java仅支持单继承，不支持多继承，支持多重继承
当类与类之间存在所属关系（is a）的时候，就定义继承
this本类，super父类
this代表一个本类对象的引用，super代表父类空间

覆盖注意事项：
  1. 子类方法覆盖父类方法时，子类的权限必须大于等于父类的权限
  2. 静态只能覆盖静态
  
子类的构造函数中第一行有一个默认的隐式语句，super()（必须是第一行）
子类的实例化过程：都会访问父类空参构造函数

对象的实例化过程
  1. JVM会读取指定路径下的.class文件，并加载进内存，先加载父类（如果有）
  2. 在堆内存中开辟空间，分配地址
  3. 在对象空间中，对对象中的属性进行默认初始化
  4. 调用对应的构造函数进行初始化
  5. 在构造函数中，第一行会先调用父类中的构造函数进行初始化
  6. 父类初始化完毕后，再对子类的属性进行显示初始化
  7. 再进行子类构造函数的特定初始化
  8. 初始化完毕，将地址值赋值给引用变量
  
final关键字
  1. final是以修饰符，可以修饰类，方法，变量
  2. final修饰的类不可以被继承
  3. final修饰的方法不可以被继承
  4. final修饰的变量是一个常量，只能赋值一次
  
抽象类
  1. 方法只有声明，没有实现，给方法就是抽象方法，需要被abstract修饰，抽象方法必须定义在抽象类中，该类必须被abstract修饰
  2. 抽象类不可以被实例化
  3. 子类必须覆盖了抽象类的所有抽象方法，才可以实例化
  
抽象类中的构造函数用于给子类对象进行初始化
抽象类可以有非抽象的方法
抽象关键字不可以和private，static，final不能共存

接口中的成员，都有固定的修饰符（如果不写，会自动添加上去）
  1. 全局常量：public static final
  2. 抽象方法：public abstract

接口与接口之间是继承关系，而且接口可以多继承

抽象类和接口的异同点
  1. 相同点：都是不断向上抽取而来的
  2. 不同点：
    1）抽象类需要被继承，而且只能单继承；接口需要被实现，而且可以多实现
    2）抽象类中可以定义抽象方法和非抽象方法，子类继承后，可以直接使用非抽象方法；接口中只能定义抽象方法，必须由子类去实现
    3）抽象类的继承，是is a关系，在定义该体系的基本共性内容；接口的实现是like a关系，在定义体系额外功能
