环境变量(属性-高级系统设置-环境变量-系统变量)
  JAVA_HOME=D:\Java\jdk1.8.0_65
  path=%JAVA_HOME%
  
临时环境变量
  set path=D:\Java\jdk1.8.0_65\bin
  set path=D:\Java\jdk1.8.0_65\bin;%path%
  
类环境变量(虚拟到什么地方找java程序)
  classpath=d:\classpass
  classpath=d:\classpass;(在指定的目录下若找不到，可以到当前目录下找)
  classpath=.;d:\classpass;
  （推荐不加“;”）
  
1. 编写.java源文件（源文件的类的名称是Demo）
2. javac *.java 生成Demo.class（运行时文件）
3. java Demo

main方法
  1. 程序入口
  2. 虚拟机调用
  3. 保证一个类的独立运行（一个类中仅有一个main方法）
  
标识符
  26个英文字母大小写，数字：0-9，符号：_、$
  
注释
  1. //单行注释
  2. /*多行注释*/
  3. javadoc生成程序说明说
      /**文档注释
      */
      
/*
需求：

思路：
1. 定义一个类，Java程序是以类的形式存在的，类的形式其实就是一个字节码文件的最终体现。
2. 定义一个主函数，程序独立运行
3. 输出

步骤：
1. 

代码仅仅是思想的实现形式
*/
  
八进制数，其实就是二进制中3个二进制位为一个八进制位
十六进制，其实就是二进制中4个二进制位为一个十六进制位

负数的二进制的最高位是1

byte b = 4;
b = 3 + 7;
byte b1 = 3;
byte b2 = 7;
b = b1 + b2;//b1和b2是变量，值不确定，所以会提示损失精度

int x1 = 10;
int x2 = 98;
int x = x1 + x2;//整数的计算结果默认为int

整数取模(%)运算，符号为取决于被模数

&&是短路运算符，&左右都计算

交换a，b的值
a = a ^ b
b = a ^ b
a = a ^ b

当if else运算后，有一个具体的结果时，可以简化为三元运算符

int x = 2;
switch(x)
{
  default:
    System.out.println('d');
  case 4:
    System.out.println('a');
  case 1:
    System.out.println('b');
    break;
  case 3:
    System.out.println('c');
    break;
}
//答案是d a b

if和switch的区别
if:
  1. 对具体值的判断；
  2. 对区间判断；
  3. 对运算结果是boolean类型的表达式进行判断；
switch：
  1. 对具体值的判断；
  2. 值的个数通常是固定的
  对于几个固定值的判断，建议使用switch语句，因为switch语句会将具体的答案都加载进内存，效率相对高
  
windows系统中回车符是有\r\n组成，linux中回车是\n
  
break和continue单独存在时，不能在其下写其他语句，因为执行不到

Arrays.binarySearch(arr, key);//若arr中有key返回对应的下表，否则返回-(正确的插入位置+1)

面向过程：强调的是过程（动作）
面向对象：强调的是对象（实体）

statci的特点：
1. static是一个修饰符，用户修饰成员；
2. static修饰的成员被所有的对象共享；
3. static先于对象存在，因为static的成员随着类的加载就已经存在了；
4. static修饰的成员多了一种调用方式，可以直接被类名调用。类名.静态成员。
5. static修饰的数据是共享数据，对象中存储的是特有数据。

对象用于封装特有数据，当不需要访问特有数据的方法，就不要创建对象

静态代码块，随着类的加载而执行，而且只执行一次；用于给类初始化

构造代码块，可以给所有对象进行初始化，构造函数给所有对象进行针对性的初始化
